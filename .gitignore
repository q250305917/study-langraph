# Byte-compiled / optimized / DLL files
# Python 字节码和优化文件
__pycache__/
*.py[cod]
*$py.class

# C extensions
# C 扩展模块
*.so

# Distribution / packaging
# 分发和打包相关文件
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# PyInstaller 打包工具生成的文件
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
# 安装日志文件
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
# 单元测试和覆盖率报告
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
# 翻译文件
*.mo
*.pot

# Django stuff:
# Django 框架相关文件
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
# Flask 框架相关文件
instance/
.webassets-cache

# Scrapy stuff:
# Scrapy 爬虫框架相关文件
.scrapy

# Sphinx documentation
# Sphinx 文档生成工具
docs/_build/

# PyBuilder
# PyBuilder 构建工具
target/

# Jupyter Notebook
# Jupyter Notebook 检查点文件
.ipynb_checkpoints

# IPython
# IPython 配置文件
profile_default/
ipython_config.py

# pyenv
# pyenv Python 版本管理工具
.python-version

# pipenv
# pipenv 依赖管理工具
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
# Poetry 依赖管理工具
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# PEP 582
# PEP 582 本地包目录
__pypackages__/

# Celery stuff
# Celery 任务队列相关文件
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
# SageMath 解析文件
*.sage.py

# Environments
# 环境变量和虚拟环境文件
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
# Spyder IDE 项目设置
.spyderproject
.spyproject

# Rope project settings
# Rope 重构工具项目设置
.ropeproject

# mkdocs documentation
# mkdocs 文档生成工具
/site

# mypy
# mypy 类型检查工具
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
# Pyre 类型检查工具
.pyre/

# pytype static type analyzer
# pytype 静态类型分析工具
.pytype/

# Cython debug symbols
# Cython 调试符号
cython_debug/

# IDEs and editors
# IDE 和编辑器配置文件
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
# 操作系统生成的文件
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
# 项目特定的忽略文件

# API keys and secrets
# API 密钥和机密信息
.env.local
.env.prod
secrets.json
api_keys.json

# Local configuration files
# 本地配置文件
config.local.json
settings.local.py

# Temporary files
# 临时文件
tmp/
temp/
*.tmp

# Log files
# 日志文件
logs/
*.log

# Database files
# 数据库文件
*.db
*.sqlite

# Cache directories
# 缓存目录
.cache/
cache/

# Output files
# 输出文件
output/
results/

# Model files (if large)
# 模型文件（如果很大的话）
models/
*.pkl
*.joblib

# Data files (sensitive or large)
# 数据文件（敏感或大文件）
data/private/
data/raw/
*.csv
*.json
*.parquet

# Notebook output
# Notebook 输出
*.nbconvert*

# Local experiments
# 本地实验文件
experiments/
sandbox/
playground/

# Claude Code specific
# Claude Code 特定文件
CLAUDE.md