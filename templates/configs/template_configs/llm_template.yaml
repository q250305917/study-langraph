# LLM 模板专用配置文件
# 定义各种LLM模板的具体配置和参数

name: "LLMTemplate"
version: "1.0.0"
description: "LLM模型调用模板的配置"
template_type: "llm"
author: "LangChain Learning Project"

# 参数定义
parameters:
  # 必需参数
  api_key:
    type: "str"
    required: true
    description: "API密钥，用于认证LLM服务"
    constraints:
      min_length: 10
      pattern: "^[a-zA-Z0-9_-]+$"
    examples:
      - "sk-1234567890abcdef"
      - "your-api-key-here"
      
  model_name:
    type: "str"
    required: true
    description: "要使用的模型名称"
    constraints:
      allowed_values: 
        - "gpt-3.5-turbo"
        - "gpt-4"
        - "gpt-4-turbo"
        - "claude-3-haiku-20240307"
        - "claude-3-sonnet-20240229"
        - "claude-3-opus-20240229"
    examples:
      - "gpt-3.5-turbo"
      - "claude-3-sonnet-20240229"
      
  # 可选参数
  temperature:
    type: "float"
    required: false
    default: 0.7
    description: "控制输出随机性的温度参数，0.0-2.0之间"
    constraints:
      min_value: 0.0
      max_value: 2.0
    examples:
      - 0.0    # 确定性输出
      - 0.7    # 平衡的创造性
      - 1.5    # 高创造性
      
  max_tokens:
    type: "int"
    required: false
    default: 1000
    description: "最大输出token数量"
    constraints:
      min_value: 1
      max_value: 8192
    examples:
      - 100    # 短回答
      - 1000   # 中等长度
      - 4000   # 长文章
      
  top_p:
    type: "float"
    required: false
    default: 1.0
    description: "核采样参数，控制词汇多样性"
    constraints:
      min_value: 0.0
      max_value: 1.0
    examples:
      - 0.9
      - 1.0
      
  frequency_penalty:
    type: "float"
    required: false
    default: 0.0
    description: "频率惩罚，减少重复内容"
    constraints:
      min_value: -2.0
      max_value: 2.0
    examples:
      - 0.0
      - 0.3
      
  presence_penalty:
    type: "float"
    required: false
    default: 0.0
    description: "存在惩罚，鼓励新话题"
    constraints:
      min_value: -2.0
      max_value: 2.0
    examples:
      - 0.0
      - 0.6
      
  timeout:
    type: "float"
    required: false
    default: 30.0
    description: "请求超时时间（秒）"
    constraints:
      min_value: 1.0
      max_value: 300.0
    examples:
      - 30.0
      - 60.0
      
  stream:
    type: "bool"
    required: false
    default: false
    description: "是否使用流式输出"
    examples:
      - true
      - false
      
  system_prompt:
    type: "str"
    required: false
    default: ""
    description: "系统提示词，定义AI的角色和行为"
    constraints:
      max_length: 4000
    examples:
      - "你是一个有用的AI助手"
      - "你是一个专业的Python编程专家"
      
  base_url:
    type: "str"
    required: false
    default: null
    description: "自定义API基础URL，用于代理或私有部署"
    constraints:
      pattern: "^https?://.+"
    examples:
      - "https://api.openai.com/v1"
      - "https://your-proxy.com/v1"

# 依赖项
dependencies:
  - "langchain-openai>=0.1.0"
  - "langchain-anthropic>=0.1.0"
  - "tiktoken>=0.5.0"

template_dependencies: []

# 使用示例
examples:
  - name: "基础OpenAI调用"
    description: "使用GPT-3.5进行简单文本生成"
    setup_parameters:
      api_key: "${OPENAI_API_KEY}"
      model_name: "gpt-3.5-turbo"
      temperature: 0.7
      max_tokens: 1000
    execute_parameters:
      input_data: "介绍一下LangChain框架的主要特点"
    expected_output:
      type: "str"
      description: "关于LangChain特点的详细介绍"
      
  - name: "高创造性写作"
    description: "使用较高温度进行创意写作"
    setup_parameters:
      api_key: "${OPENAI_API_KEY}"
      model_name: "gpt-4"
      temperature: 1.2
      max_tokens: 2000
      system_prompt: "你是一个富有创意的作家"
    execute_parameters:
      input_data: "写一个关于AI的科幻短故事"
    expected_output:
      type: "str"
      description: "一个原创的科幻短故事"
      
  - name: "精确技术问答"
    description: "使用低温度进行精确的技术回答"
    setup_parameters:
      api_key: "${OPENAI_API_KEY}"
      model_name: "gpt-4"
      temperature: 0.1
      max_tokens: 1500
      system_prompt: "你是一个精确的技术专家，只提供准确的技术信息"
    execute_parameters:
      input_data: "解释Python中的装饰器工作原理"
    expected_output:
      type: "str"
      description: "关于Python装饰器的精确技术解释"

# 执行配置
timeout: 60.0
retry_count: 2
async_enabled: true

# 性能配置
cache_enabled: true
cache_ttl: 1800  # 30分钟

# 标签
tags:
  - "llm"
  - "text-generation"
  - "ai-model"
  - "openai"
  - "anthropic"

# 文档链接
documentation_url: "https://python.langchain.com/docs/modules/model_io/llms/"
source_url: "https://github.com/langchain-ai/langchain"

# 性能优化建议
performance_tips:
  - "使用适当的max_tokens限制避免过长输出"
  - "根据任务类型调整temperature参数"
  - "在生产环境中启用缓存减少API调用"
  - "使用流式输出改善用户体验"
  - "设置合理的timeout避免长时间等待"
  
# 常见错误和解决方案
troubleshooting:
  authentication_error:
    description: "API密钥认证失败"
    solutions:
      - "检查API密钥是否正确"
      - "确认API密钥有足够的权限"
      - "检查环境变量是否正确设置"
      
  rate_limit_error:
    description: "API调用频率超限"
    solutions:
      - "增加请求间隔"
      - "实现指数退避重试"
      - "升级API计划"
      
  timeout_error:
    description: "请求超时"
    solutions:
      - "增加timeout参数值"
      - "减少max_tokens降低响应时间"
      - "检查网络连接"
      
  token_limit_error:
    description: "输入或输出token数量超限"
    solutions:
      - "减少输入文本长度"
      - "降低max_tokens参数"
      - "使用文本分割处理长文档"

# 最佳实践
best_practices:
  - "根据任务类型选择合适的模型"
  - "使用系统提示词明确定义AI角色"
  - "实现错误处理和重试机制"
  - "监控API使用量和成本"
  - "在开发环境中使用较小的模型降低成本"
  - "定期更新模型版本获取最新功能"